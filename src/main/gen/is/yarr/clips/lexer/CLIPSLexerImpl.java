// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CLIPSLexer.flex

package is.yarr.clips.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import is.yarr.clips.psi.CLIPSTypes;
import com.intellij.psi.TokenType;


class CLIPSLexerImpl implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\0\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\1\16\1\17\1\20"+
    "\10\21\1\22\1\23\1\24\1\25\1\26\1\27\1\0"+
    "\1\30\3\31\1\32\1\33\5\31\1\34\5\31\1\35"+
    "\1\36\1\37\1\40\5\31\1\0\1\41\1\0\1\42"+
    "\1\31\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\31\1\0\1\74\1\0\1\75"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\76";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\10\1\1\1\11\1\12\1\13\1\10\1\14"+
    "\1\10\1\15\2\1\1\4\20\1\1\16\2\1\1\17"+
    "\1\20\1\3\1\0\1\21\1\11\1\1\1\10\1\0"+
    "\1\22\26\1\1\16\42\1\1\23\1\1\1\11\1\0"+
    "\21\1\1\10\11\1\1\10\2\1\1\10\1\1\1\10"+
    "\21\1\1\24\41\1\1\10\172\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01b9\0\u01b9\0\77\0\u01f8\0\u0237\0\u0276\0\77\0\u02b5"+
    "\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u01b9\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u01b9\0\u01b9\0\u01b9\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u01b9\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\77\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u01b9\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d"+
    "\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd"+
    "\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5"+
    "\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed"+
    "\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5"+
    "\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd"+
    "\0\u381c\0\u385b\0\u389a\0\u38d9\0\u20fa\0\u3918\0\u3957\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e"+
    "\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176"+
    "\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956"+
    "\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\13\3\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\2\1\25\3\2\1\26"+
    "\2\2\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\2\1\41\1\42\1\43\1\44"+
    "\1\45\1\2\1\46\1\47\1\50\1\51\1\2\1\52"+
    "\2\2\1\53\1\54\2\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\53\2\1\0\3\3\73\0\1\2"+
    "\2\3\1\4\1\2\1\0\2\2\2\0\11\2\1\0"+
    "\54\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\1\2\1\13\51\2\5\6\1\55\33\6\1\56\35\6"+
    "\27\0\1\57\146\0\1\2\2\0\2\2\1\0\2\2"+
    "\2\0\3\2\1\15\1\2\3\16\1\2\1\0\54\2"+
    "\2\0\2\2\1\0\2\2\2\0\5\2\3\60\1\2"+
    "\1\0\54\2\2\0\2\2\1\0\2\2\2\0\3\2"+
    "\1\60\1\2\3\16\1\2\1\0\6\2\1\61\14\2"+
    "\1\61\27\2\2\20\2\0\72\20\15\0\1\62\10\0"+
    "\2\62\76\0\1\62\75\0\1\62\63\0\1\63\15\0"+
    "\11\64\2\0\31\64\3\0\1\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\4\2\1\65\47\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\11\2\1\66"+
    "\42\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\20\2\1\67\4\2\1\70\6\2\1\71\4\2\1\72"+
    "\1\2\1\73\10\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\74\10\2\1\75\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\76"+
    "\12\2\1\77\5\2\1\100\13\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\101\3\2\1\102"+
    "\5\2\1\13\5\2\1\103\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\104\4\2\1\13"+
    "\6\2\1\105\5\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\106\12\2\1\107\2\2\1\110"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\111\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\112\34\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\24\2\1\113\6\2\1\114"+
    "\1\115\17\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\116\11\2\1\117\16\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\17\2\1\120\3\2"+
    "\1\121\3\2\1\122\5\2\1\123\5\2\1\124\10\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\125\3\2\1\126\5\2\1\127\4\2\1\130\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\20\2"+
    "\1\131\15\2\1\132\1\2\1\113\13\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\40\2\1\133\13\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\134\11\2\1\135\5\2\1\136\10\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\17\2\1\137\12\2"+
    "\1\140\4\2\1\141\2\2\1\142\1\143\1\2\1\144"+
    "\1\2\1\145\4\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\146\3\2\1\147\2\2\1\150"+
    "\20\2\1\151\4\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\152\1\2\1\153\15\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\154"+
    "\6\2\1\155\24\2\2\6\2\0\72\6\31\0\11\156"+
    "\2\0\31\156\3\0\1\2\2\0\2\2\1\0\2\2"+
    "\2\0\5\2\3\60\1\2\1\0\6\2\1\61\14\2"+
    "\1\61\30\2\2\0\2\2\1\0\2\2\2\0\1\2"+
    "\2\157\2\2\3\160\1\2\1\0\53\2\30\0\11\161"+
    "\2\0\31\161\17\0\1\64\2\0\3\64\6\0\11\64"+
    "\2\0\31\64\3\0\1\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\10\2\1\162\43\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\14\2\1\163\37\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\41\2"+
    "\1\13\12\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\164\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\22\2\1\113\31\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\41\2\1\165\12\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\42\2"+
    "\1\166\11\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\34\2\1\167\17\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\23\2\1\170\30\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\41\2\1\171\12\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\172\11\2\1\76\16\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\23\2\1\173\6\2\1\174\21\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\21\2"+
    "\1\175\2\2\1\176\5\2\1\177\21\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\44\2\1\13\7\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\36\2"+
    "\1\200\15\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\41\2\1\201\12\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\27\2\1\202\6\2\1\203\15\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\21\2"+
    "\1\204\32\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\35\2\1\205\16\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\40\2\1\206\13\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\34\2\1\207\17\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\32\2"+
    "\1\210\21\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\36\2\1\211\15\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\41\2\1\212\1\213\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\214"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\25\2\1\215\7\2\1\216\7\2\1\153\6\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\46\2\1\13"+
    "\5\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\217\20\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\13\17\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\22\2\1\220\31\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\32\2\1\221"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\37\2\1\13\14\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\32\2\1\113\21\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\113\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\26\2\1\222"+
    "\25\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\30\2\1\223\23\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\122\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\27\2\1\224\5\2\1\225"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\226\16\2\1\227\2\2\1\230\1\231\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\43\2"+
    "\1\74\10\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\32\2\1\232\1\2\1\13\17\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\32\2\1\233\21\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\35\2"+
    "\1\127\16\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\40\2\1\210\13\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\40\2\1\234\13\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\20\2\1\235\33\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\27\2"+
    "\1\154\24\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\33\2\1\236\20\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\20\2\1\13\33\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\41\2\1\127\12\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\237\30\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\36\2\1\201\15\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\45\2\1\240\6\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\21\2\1\241\32\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\42\2"+
    "\1\242\11\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\27\2\1\243\23\2\14\0\1\156\2\0\3\156"+
    "\6\0\11\156\2\0\31\156\3\0\1\2\2\0\2\2"+
    "\1\0\2\2\2\0\5\2\3\160\1\2\1\0\53\2"+
    "\12\0\1\244\1\0\1\161\2\0\3\161\6\0\11\161"+
    "\2\0\31\161\3\0\1\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\12\2\1\163\41\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\6\2\1\113\45\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\34\2"+
    "\1\245\17\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\141\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\35\2\1\246\16\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\22\2\1\13\31\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\17\2"+
    "\1\247\34\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\13\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\17\2\1\250\34\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\17\2\1\251\34\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\24\2"+
    "\1\113\27\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\32\2\1\252\21\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\17\2\1\253\1\2\1\254\2\2"+
    "\1\255\1\256\1\2\1\257\3\2\1\260\4\2\1\261"+
    "\1\2\1\262\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\251\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\263\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\23\2\1\113"+
    "\30\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\264\1\13\11\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\32\2\1\265\21\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\42\2\1\266\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\17\2"+
    "\1\210\34\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\17\2\1\267\13\2\1\205\20\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\41\2\1\270\12\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\42\2"+
    "\1\13\11\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\32\2\1\265\2\2\1\271\16\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\23\2\1\272\30\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\273\30\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\25\2\1\274\26\2\2\0\2\2\1\0\2\2"+
    "\2\0\6\2\1\275\2\2\1\0\27\2\1\276\24\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\36\2"+
    "\1\277\15\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\20\2\1\300\33\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\27\2\1\301\24\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\42\2\1\302\11\2"+
    "\2\0\2\2\1\0\1\13\1\2\2\0\11\2\1\0"+
    "\54\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\303\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\304\17\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\25\2\1\305\26\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\22\2\1\306"+
    "\31\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\307\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\210\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\310\2\2\1\311"+
    "\10\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\67\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\312\24\2\2\0\2\2\1\0"+
    "\2\2\2\0\2\2\1\313\6\2\1\0\54\2\2\0"+
    "\2\2\1\0\2\2\2\0\2\2\1\314\6\2\1\0"+
    "\41\2\1\315\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\2\2\1\316\6\2\1\0\54\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\113\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\154"+
    "\34\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\76\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\317\32\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\171\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\22\2\1\320"+
    "\31\2\2\0\2\2\1\0\2\2\2\0\2\2\1\321"+
    "\6\2\1\0\54\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\31\2\1\13\22\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\13\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\42\2\1\322"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\323\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\43\2\1\112\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\324\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\325"+
    "\23\2\1\326\10\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\327\6\2\1\330\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\331"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\332\11\2\1\333\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\43\2\1\334\10\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\23\2\1\335"+
    "\30\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\27\2\1\336\24\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\337\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\35\2\1\340\16\2\2\0"+
    "\2\2\1\0\2\2\2\0\2\2\1\341\6\2\1\0"+
    "\41\2\1\13\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\32\2\1\126\21\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\47\2\1\342\4\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\127"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\40\2\1\343\13\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\25\2\1\344\26\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\130\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\5\2\1\13\3\2\1\0"+
    "\54\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\21\2\1\345\32\2\2\0\2\2\1\0\2\2\2\0"+
    "\2\2\1\346\6\2\1\0\54\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\347\30\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\24\2\1\350"+
    "\27\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\27\2\1\351\24\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\127\32\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\352\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\222"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\353\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\354\34\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\355\34\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\122"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\356\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\357\5\2\1\360\2\2\1\361"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\362\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\363\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\205\32\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\26\2\1\13"+
    "\25\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\13\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\24\2\1\364\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\365\30\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\201"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\366\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\264\32\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\367\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\370"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\35\2\1\371\16\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\372\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\41\2\1\373\1\374\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\22\2"+
    "\1\261\31\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\32\2\1\201\21\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\33\2\1\375\20\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\21\2\1\376\32\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\41\2"+
    "\1\113\12\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\22\2\1\322\31\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\27\2\1\360\10\2\1\377\1\u0100"+
    "\12\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\13\20\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\365\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\250\30\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\126"+
    "\34\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\24\2\1\u0101\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\40\2\1\222\13\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\47\2\1\13\4\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\41\2\1\u0102"+
    "\12\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\35\2\1\u0103\16\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\u0104\24\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\322\32\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\21\2\1\210"+
    "\32\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\34\2\1\u0105\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\210\15\2\1\u0106\16\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\u0107"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\u0108\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\u0109\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\37\2\1\222\14\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\u010a"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\337\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\u010b\32\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\u010c\30\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\20\2\1\345"+
    "\33\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\42\2\1\u010d\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\u010e\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\26\2\1\u010f\25\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\36\2\1\u0110"+
    "\15\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u0111\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\u0112\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\u0113\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\u0114"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\140\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\43\2\1\210\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\171\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\21\2\1\201"+
    "\32\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\u0115\20\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\22\2\1\u0116\31\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\u0117\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\u0118"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\21\2\1\u0119\32\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\u011a\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\u011b\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\u011c"+
    "\34\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u011d\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\35\2\1\71\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\32\2\1\u011e\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\42\2\1\171"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\u011f\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\35\2\1\u0120\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\u0121\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\36\2\1\u0122"+
    "\15\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\120\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\25\2\1\u0123\26\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\27\2\1\u0124\24\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\43\2\1\337"+
    "\10\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\27\2\1\u0125\24\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\u0126\24\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\u0127\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\25\2\1\u0128"+
    "\26\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u0129\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\u012a\34\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\u012b\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\2\2\1\u012c\6\2\1\0"+
    "\54\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u012d\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\317\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\34\2\1\u012e\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\237"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\21\2\1\113\32\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\u012f\32\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\u0130\30\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\42\2\1\201"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\42\2\1\u0131\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\2\2\1\u0132\6\2\1\0\54\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\u0133\32\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\171"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\25\2\1\13\26\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\337\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\2\2\1\u0134\6\2\1\0\54\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\27\2\1\u0135"+
    "\24\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\44\2\1\u0136\7\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\35\2\1\u0137\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\26\2\1\u0138\25\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\122"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u0139\34\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\43\2\1\u013a\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\u013b\34\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\32\2\1\u013c"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\34\2\1\210\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\u013d\17\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\43\2\1\171\10\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\22\2\1\u013e"+
    "\31\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\u013f\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\u0140\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\113\12\2";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19341];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\6\1\3\11\14\1\1\11\23\1\3\11\1\0"+
    "\3\1\1\11\1\0\75\1\1\0\62\1\1\11\234\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLIPSLexerImpl(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CLIPSTypes.IDENTIFIER;
            }
          // fall through
          case 21: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 3:
            { return CLIPSTypes.STRING;
            }
          // fall through
          case 23: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 24: break;
          case 5:
            { return CLIPSTypes.AMPERSAND;
            }
          // fall through
          case 25: break;
          case 6:
            { return CLIPSTypes.LPAREN;
            }
          // fall through
          case 26: break;
          case 7:
            { return CLIPSTypes.RPAREN;
            }
          // fall through
          case 27: break;
          case 8:
            { return CLIPSTypes.BUILTIN_FUNCTION;
            }
          // fall through
          case 28: break;
          case 9:
            { return CLIPSTypes.NUMBER;
            }
          // fall through
          case 29: break;
          case 10:
            { return CLIPSTypes.COLON;
            }
          // fall through
          case 30: break;
          case 11:
            { return CLIPSTypes.COMMENT;
            }
          // fall through
          case 31: break;
          case 12:
            { return CLIPSTypes.EQUALS;
            }
          // fall through
          case 32: break;
          case 13:
            { return CLIPSTypes.WILDCARD;
            }
          // fall through
          case 33: break;
          case 14:
            { return CLIPSTypes.KEYWORD;
            }
          // fall through
          case 34: break;
          case 15:
            { return CLIPSTypes.PIPE;
            }
          // fall through
          case 35: break;
          case 16:
            { return CLIPSTypes.TILDE;
            }
          // fall through
          case 36: break;
          case 17:
            { return CLIPSTypes.MULTIFIELD_WILDCARD;
            }
          // fall through
          case 37: break;
          case 18:
            { return CLIPSTypes.VARIABLE;
            }
          // fall through
          case 38: break;
          case 19:
            { return CLIPSTypes.MULTIFIELD_VARIABLE;
            }
          // fall through
          case 39: break;
          case 20:
            { return CLIPSTypes.GLOBAL_VARIABLE;
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
