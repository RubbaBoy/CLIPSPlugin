// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CLIPSLexer.flex

package is.yarr.clips.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import is.yarr.clips.psi.CLIPSTypes;
import com.intellij.psi.TokenType;


class CLIPSLexerImpl implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\0\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\1\16\1\17\1\20"+
    "\10\21\1\22\1\23\1\24\1\25\1\26\1\27\1\0"+
    "\1\30\3\31\1\32\1\33\5\31\1\34\5\31\1\35"+
    "\1\36\1\37\1\40\5\31\1\0\1\41\1\0\1\42"+
    "\1\31\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\31\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\31\1\0\1\73\1\0\1\74"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\75";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\10\1\1\1\11\1\12\1\13\1\10\1\14"+
    "\1\10\1\15\2\1\1\4\20\1\1\16\2\1\1\17"+
    "\1\20\1\3\1\0\1\21\1\11\1\1\1\10\1\0"+
    "\1\22\26\1\1\16\41\1\1\23\1\1\1\11\1\0"+
    "\21\1\1\10\11\1\1\10\2\1\1\10\1\1\1\10"+
    "\20\1\1\24\40\1\1\10\172\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01b2\0\u01b2\0\76\0\u01f0\0\u022e\0\u026c\0\76\0\u02aa"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u01b2\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u01b2\0\u01b2\0\u01b2\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u01b2\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\76\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u01b2\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa"+
    "\0\u3738\0\u2036\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c"+
    "\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c"+
    "\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c"+
    "\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c"+
    "\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c"+
    "\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\13\3\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\2\1\25\3\2\1\26"+
    "\2\2\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\2\1\41\1\42\1\43\1\44"+
    "\1\45\1\2\1\46\1\47\1\50\1\51\1\2\1\52"+
    "\2\2\1\53\1\54\2\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\52\2\1\0\3\3\72\0\1\2"+
    "\2\3\1\4\1\2\1\0\2\2\2\0\11\2\1\0"+
    "\53\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\1\2\1\13\50\2\5\6\1\55\33\6\1\56\34\6"+
    "\27\0\1\57\144\0\1\2\2\0\2\2\1\0\2\2"+
    "\2\0\3\2\1\15\1\2\3\16\1\2\1\0\53\2"+
    "\2\0\2\2\1\0\2\2\2\0\5\2\3\60\1\2"+
    "\1\0\53\2\2\0\2\2\1\0\2\2\2\0\3\2"+
    "\1\60\1\2\3\16\1\2\1\0\6\2\1\61\14\2"+
    "\1\61\26\2\2\20\2\0\71\20\15\0\1\62\10\0"+
    "\2\62\75\0\1\62\74\0\1\62\62\0\1\63\15\0"+
    "\11\64\2\0\30\64\3\0\1\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\4\2\1\65\46\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\11\2\1\66"+
    "\41\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\20\2\1\67\4\2\1\70\5\2\1\71\4\2\1\72"+
    "\1\2\1\73\10\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\74\7\2\1\75\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\76"+
    "\11\2\1\77\5\2\1\100\13\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\101\3\2\1\102"+
    "\4\2\1\13\5\2\1\103\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\31\2\1\104\4\2\1\13"+
    "\6\2\1\105\5\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\106\11\2\1\107\2\2\1\110"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\111\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\112\33\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\24\2\1\113\5\2\1\114"+
    "\1\115\17\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\116\10\2\1\117\16\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\17\2\1\120\3\2"+
    "\1\121\3\2\1\122\4\2\1\123\5\2\1\124\10\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\125\3\2\1\126\4\2\1\127\4\2\1\130\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\35\2"+
    "\1\131\1\2\1\113\13\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\37\2\1\132\13\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\23\2\1\133\10\2"+
    "\1\134\5\2\1\135\10\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\17\2\1\136\11\2\1\137\4\2"+
    "\1\140\2\2\1\141\1\142\1\2\1\143\1\2\1\144"+
    "\4\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\145\3\2\1\146\2\2\1\147\17\2\1\150"+
    "\4\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\151\1\2\1\152\15\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\153\6\2\1\154"+
    "\23\2\2\6\2\0\71\6\31\0\11\155\2\0\30\155"+
    "\3\0\1\2\2\0\2\2\1\0\2\2\2\0\5\2"+
    "\3\60\1\2\1\0\6\2\1\61\14\2\1\61\27\2"+
    "\2\0\2\2\1\0\2\2\2\0\1\2\2\156\2\2"+
    "\3\157\1\2\1\0\52\2\30\0\11\160\2\0\30\160"+
    "\17\0\1\64\2\0\3\64\6\0\11\64\2\0\30\64"+
    "\3\0\1\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\10\2\1\161\42\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\14\2\1\162\36\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\40\2\1\13\12\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\23\2"+
    "\1\163\27\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\22\2\1\113\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\40\2\1\164\12\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\41\2\1\165\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\33\2"+
    "\1\166\17\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\167\27\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\40\2\1\170\12\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\23\2\1\171\10\2"+
    "\1\76\16\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\172\5\2\1\173\21\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\21\2\1\174\2\2"+
    "\1\175\4\2\1\176\21\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\43\2\1\13\7\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\35\2\1\177\15\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\40\2"+
    "\1\200\12\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\27\2\1\201\5\2\1\202\15\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\21\2\1\203\31\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\34\2"+
    "\1\204\16\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\37\2\1\205\13\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\33\2\1\206\17\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\31\2\1\207\21\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\35\2"+
    "\1\210\15\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\40\2\1\211\1\212\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\213\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\25\2\1\214"+
    "\6\2\1\215\7\2\1\152\6\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\45\2\1\13\5\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\32\2\1\216"+
    "\20\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\13\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\22\2\1\217\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\31\2\1\220\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\36\2\1\13"+
    "\14\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\113\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\113\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\26\2\1\221\24\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\23\2\1\122"+
    "\27\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\27\2\1\222\4\2\1\223\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\224\15\2\1\225"+
    "\2\2\1\226\1\227\11\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\42\2\1\74\10\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\31\2\1\230\1\2"+
    "\1\13\17\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\31\2\1\231\21\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\34\2\1\127\16\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\37\2\1\207\13\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\37\2"+
    "\1\232\13\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\20\2\1\233\32\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\27\2\1\153\23\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\32\2\1\234\20\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\20\2"+
    "\1\13\32\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\40\2\1\127\12\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\23\2\1\235\27\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\35\2\1\200\15\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\44\2"+
    "\1\236\6\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\21\2\1\237\31\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\41\2\1\240\11\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\27\2\1\241\22\2"+
    "\14\0\1\155\2\0\3\155\6\0\11\155\2\0\30\155"+
    "\3\0\1\2\2\0\2\2\1\0\2\2\2\0\5\2"+
    "\3\157\1\2\1\0\52\2\12\0\1\242\1\0\1\160"+
    "\2\0\3\160\6\0\11\160\2\0\30\160\3\0\1\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\12\2"+
    "\1\162\40\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\6\2\1\113\44\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\33\2\1\243\17\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\23\2\1\140\27\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\34\2"+
    "\1\244\16\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\22\2\1\13\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\17\2\1\245\33\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\23\2\1\13\27\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\17\2"+
    "\1\246\33\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\17\2\1\247\33\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\24\2\1\113\26\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\31\2\1\250\21\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\17\2"+
    "\1\251\1\2\1\252\2\2\1\253\1\254\1\2\1\255"+
    "\2\2\1\256\4\2\1\257\1\2\1\260\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\23\2\1\247"+
    "\27\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\261\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\113\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\262\1\13\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\31\2"+
    "\1\263\21\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\41\2\1\264\11\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\17\2\1\207\33\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\17\2\1\265\12\2"+
    "\1\204\20\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\40\2\1\266\12\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\41\2\1\13\11\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\31\2\1\263\2\2"+
    "\1\267\16\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\23\2\1\270\27\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\23\2\1\271\27\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\25\2\1\272\25\2"+
    "\2\0\2\2\1\0\2\2\2\0\6\2\1\273\2\2"+
    "\1\0\27\2\1\274\23\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\35\2\1\275\15\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\20\2\1\276\32\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\27\2"+
    "\1\277\23\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\41\2\1\300\11\2\2\0\2\2\1\0\1\13"+
    "\1\2\2\0\11\2\1\0\53\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\301\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\25\2\1\302"+
    "\25\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\22\2\1\303\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\31\2\1\304\21\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\207\27\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\305"+
    "\2\2\1\306\10\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\67\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\27\2\1\307\23\2\2\0"+
    "\2\2\1\0\2\2\2\0\2\2\1\310\6\2\1\0"+
    "\53\2\2\0\2\2\1\0\2\2\2\0\2\2\1\311"+
    "\6\2\1\0\40\2\1\312\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\2\2\1\313\6\2\1\0\53\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\33\2\1\113"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\153\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\76\33\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\314\31\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\31\2\1\170"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\22\2\1\315\30\2\2\0\2\2\1\0\2\2\2\0"+
    "\2\2\1\316\6\2\1\0\53\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\30\2\1\13\22\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\13"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\317\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\320\33\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\112\10\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\31\2\1\321"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\322\22\2\1\323\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\324\5\2\1\325"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\326\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\327\10\2\1\330\16\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\42\2\1\331"+
    "\10\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\332\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\333\23\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\41\2\1\334\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\335"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\2\2\1\336"+
    "\6\2\1\0\40\2\1\13\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\31\2\1\126\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\46\2\1\337"+
    "\4\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\37\2\1\127\13\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\37\2\1\340\13\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\25\2\1\341\25\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\41\2\1\130"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\5\2\1\13"+
    "\3\2\1\0\53\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\342\31\2\2\0\2\2\1\0"+
    "\2\2\2\0\2\2\1\343\6\2\1\0\53\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\23\2\1\344"+
    "\27\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\24\2\1\345\26\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\346\23\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\41\2\1\347\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\33\2\1\221"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\350\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\351\33\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\352\33\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\122"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\353\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\354\5\2\1\355\1\2\1\356"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\40\2\1\357\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\360\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\204\31\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\26\2\1\13"+
    "\24\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\13\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\24\2\1\361\26\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\362\27\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\200"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\363\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\262\31\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\364\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\33\2\1\365"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\34\2\1\366\16\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\40\2\1\367\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\40\2\1\370\1\371\11\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\22\2"+
    "\1\257\30\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\31\2\1\200\21\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\32\2\1\372\20\2\2\0\2\2"+
    "\1\0\2\2\2\0\11\2\1\0\21\2\1\373\31\2"+
    "\2\0\2\2\1\0\2\2\2\0\11\2\1\0\40\2"+
    "\1\113\12\2\2\0\2\2\1\0\2\2\2\0\11\2"+
    "\1\0\22\2\1\317\30\2\2\0\2\2\1\0\2\2"+
    "\2\0\11\2\1\0\27\2\1\355\7\2\1\374\1\375"+
    "\12\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\13\20\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\362\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\246\27\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\126"+
    "\33\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\24\2\1\376\26\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\37\2\1\221\13\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\46\2\1\13\4\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\40\2\1\377"+
    "\12\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\34\2\1\u0100\16\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\u0101\23\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\317\31\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\21\2\1\207"+
    "\31\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\u0102\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\207\14\2\1\u0103\16\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\33\2\1\u0104"+
    "\17\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\u0105\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\u0106\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\36\2\1\221\14\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\u0107"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\40\2\1\334\12\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\u0108\31\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\u0109\27\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\20\2\1\342"+
    "\32\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\u010a\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\40\2\1\u010b\12\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\26\2\1\u010c\24\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\u010d"+
    "\15\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u010e\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\u010f\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\31\2\1\u0110\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\u0111"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\137\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\207\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\170\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\21\2\1\200"+
    "\31\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\32\2\1\u0112\20\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\22\2\1\u0113\30\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\u0114\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\u0115"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\21\2\1\u0116\31\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\u0117\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\37\2\1\u0118\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\17\2\1\u0119"+
    "\33\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u011a\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\71\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\31\2\1\u011b\21\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\41\2\1\170"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\u011c\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\u011d\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\37\2\1\u011e\13\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\35\2\1\u011f"+
    "\15\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\23\2\1\120\27\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\25\2\1\u0120\25\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\27\2\1\u0121\23\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\42\2\1\334"+
    "\10\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\27\2\1\u0122\23\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\27\2\1\u0123\23\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\u0124\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\25\2\1\u0125"+
    "\25\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u0126\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\17\2\1\u0127\33\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\41\2\1\u0128\11\2\2\0"+
    "\2\2\1\0\2\2\2\0\2\2\1\u0129\6\2\1\0"+
    "\53\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u012a\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\41\2\1\314\11\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\33\2\1\u012b\17\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\235"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\21\2\1\113\31\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\21\2\1\u012c\31\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\23\2\1\u012d\27\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\41\2\1\200"+
    "\11\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\41\2\1\u012e\11\2\2\0\2\2\1\0\2\2\2\0"+
    "\2\2\1\u012f\6\2\1\0\53\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\21\2\1\u0130\31\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\37\2\1\170"+
    "\13\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\25\2\1\13\25\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\334\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\2\2\1\u0131\6\2\1\0\53\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\27\2\1\u0132"+
    "\23\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\43\2\1\u0133\7\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\34\2\1\u0134\16\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\26\2\1\u0135\24\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\34\2\1\122"+
    "\16\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\17\2\1\u0136\33\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\42\2\1\u0137\10\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\17\2\1\u0138\33\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\31\2\1\u0139"+
    "\21\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\33\2\1\207\17\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\33\2\1\u013a\17\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\42\2\1\170\10\2\2\0"+
    "\2\2\1\0\2\2\2\0\11\2\1\0\22\2\1\u013b"+
    "\30\2\2\0\2\2\1\0\2\2\2\0\11\2\1\0"+
    "\31\2\1\u013c\21\2\2\0\2\2\1\0\2\2\2\0"+
    "\11\2\1\0\23\2\1\u013d\27\2\2\0\2\2\1\0"+
    "\2\2\2\0\11\2\1\0\37\2\1\113\12\2";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18848];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\6\1\3\11\14\1\1\11\23\1\3\11\1\0"+
    "\3\1\1\11\1\0\74\1\1\0\61\1\1\11\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLIPSLexerImpl(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CLIPSTypes.IDENTIFIER;
            }
          // fall through
          case 21: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 3:
            { return CLIPSTypes.STRING;
            }
          // fall through
          case 23: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 24: break;
          case 5:
            { return CLIPSTypes.AMPERSAND;
            }
          // fall through
          case 25: break;
          case 6:
            { return CLIPSTypes.LPAREN;
            }
          // fall through
          case 26: break;
          case 7:
            { return CLIPSTypes.RPAREN;
            }
          // fall through
          case 27: break;
          case 8:
            { return CLIPSTypes.BUILTIN_FUNCTION;
            }
          // fall through
          case 28: break;
          case 9:
            { return CLIPSTypes.NUMBER;
            }
          // fall through
          case 29: break;
          case 10:
            { return CLIPSTypes.COLON;
            }
          // fall through
          case 30: break;
          case 11:
            { return CLIPSTypes.COMMENT;
            }
          // fall through
          case 31: break;
          case 12:
            { return CLIPSTypes.EQUALS;
            }
          // fall through
          case 32: break;
          case 13:
            { return CLIPSTypes.WILDCARD;
            }
          // fall through
          case 33: break;
          case 14:
            { return CLIPSTypes.KEYWORD;
            }
          // fall through
          case 34: break;
          case 15:
            { return CLIPSTypes.PIPE;
            }
          // fall through
          case 35: break;
          case 16:
            { return CLIPSTypes.TILDE;
            }
          // fall through
          case 36: break;
          case 17:
            { return CLIPSTypes.MULTIFIELD_WILDCARD;
            }
          // fall through
          case 37: break;
          case 18:
            { return CLIPSTypes.VARIABLE;
            }
          // fall through
          case 38: break;
          case 19:
            { return CLIPSTypes.MULTIFIELD_VARIABLE;
            }
          // fall through
          case 39: break;
          case 20:
            { return CLIPSTypes.GLOBAL_VARIABLE;
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
